import { Component, inject, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { UserService } from '../../../core/services/users/user.service';
import { Users } from '../../../model/users';
import { Shared } from '../../../shared/shared.module';

@Component({
  selector: 'app-users',
  standalone: true,
  imports: [Shared],
  templateUrl: './users.component.html',
  styleUrls: ['./users.component.scss']
})
export class UsersComponent implements OnInit {
  title = 'المستخدمون';
  checkTOEdit = false;
  toastr = inject(ToastrService);
  formBuilder = inject(FormBuilder);
  userService = inject(UserService);
  users: Users[] = [];

  form: FormGroup = this.formBuilder.group({
    id: [''],
    Uname: ['', Validators.required],
    psw: [''],
    date: [new Date()],
    email: ['', [Validators.email, Validators.required]],
    type: ['user']
  });

  ngOnInit(): void {
    this.refreshUsers();
  }

  refreshUsers(): void {
    this.userService.getUsers().subscribe(users => {
      this.users = users;
      console.log('Users:', this.users);
    });
  }

  close(): void {
    const modal = document.getElementById('id01');
    if (modal) {
      modal.style.display = 'none';
    }
  }

  patchUser(editUser: Users): void {
    const modal = document.getElementById('id01');
    if (modal) {
      this.checkTOEdit = true;
      modal.style.display = 'block';
      this.form.patchValue(editUser);
      console.log('Editing user:', editUser);
    }
  }

  editUser(): void {
    const user = { ...this.form.value, id: this.form.value.id };
    this.userService.editUser(user).subscribe(() => {
      console.log('User edited successfully');
      this.toastr.success('User edited successfully');
      this.close();
      this.refreshUsers();
    });
  }

  deleteUser(user: Users): void {
    this.userService.deleteUser(user.id).subscribe(() => {
      console.log('User deleted:', user);
      this.toastr.success('User deleted successfully');
      this.refreshUsers();
    });
  }

  register(): void {
    if (this.form.valid) {
      if (this.checkTOEdit) {
        this.editUser();
      } else {
        this.addUser();
      }
    } else {
      console.log('Form is invalid', this.form);
    }
  }

  addUser(): void {
    const user = { ...this.form.value, id: '' }; // Remove id before adding, as it will be generated by Firebase
    this.userService.addUser(user).subscribe(addedUser => {
      console.log('User added successfully', addedUser);
      this.toastr.success("User added successfully");
      this.close();
      this.refreshUsers();
    });
  }
}
